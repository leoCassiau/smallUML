-- @path MM=/SmallUML/model/smalluml.ecore
-- @path MM1=/UML/model/uml.ecore

module Small2UML;
create OUT : MM1 from IN : MM;

rule Root2Package {
	from
		s: MM!Root
	to
		t: MM1!Package (
			member <- s.elements->collect(c | thisModule.Class2Class(c))
		)
}

lazy rule Class2Class {
	from
		s: MM!Class
	to
		t: MM1!Class (
			name <- s.name,
			superClass <- s.superClass->collect(sc | thisModule.Type2Type(sc)),
			ownedAttribute <- s.ownedProperties->collect(p | thisModule.Property2Property(p)),
			ownedOperation <- s.ownedOperations->collect(o | thisModule.Operation2Operation(o))
		)
}

lazy rule Property2Property {
	from 
		s: MM!Property
	to
		t: MM1!Property (
			name <- s.name,
			type <- thisModule.Type2Type(s.type), -- TODO
			upper <- s.upperBound,
			lower <- s.lowerBound
		)
}

lazy rule Operation2Operation {
	from
		s: MM!Operation
	to
		t: MM1!Operation (
			name <- s.name,
			type <- thisModule.Type2Type(s.resultType),
			ownedParameter <- s.params->collect(p | thisModule.Type2Type(p)) --TODO
		)
}

lazy rule Type2Type {
	from
		s: MM!Type
	to
		t: MM1!PrimitiveType (
			name <- s.oclIsUndefined().toString()
		)	
}