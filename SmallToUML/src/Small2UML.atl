-- @path MM=/SmallUML/model/smalluml.ecore
-- @path MM1=/UML/model/uml.ecore

module Small2UML;
create OUT : MM1 from IN : MM;

rule Root2Package {
	from
		s: MM!Root
	to
		t: MM1!Package (
			packagedElement <- s.primitiveTypes.union(s.elements)
		)
}

rule Class2Class {
	from
		s: MM!Class
	to
		t: MM1!Class (
			name <- s.name,
			superClass <- s.superClass,
			ownedAttribute <- s.ownedProperties,
			ownedOperation <- s.ownedOperations
		)
}

rule Property2Property {
	from 
		s: MM!Property
	to
		t: MM1!Property (
			name <- s.name,
			type <- s.type,
			upper <- s.upperBound,
			lower <- s.lowerBound
		)
}

rule Operation2Operation {
	from
		s: MM!Operation
	to
		t: MM1!Operation (
			name <- s.name,
			ownedParameter <- s.params->collect(p | thisModule.Type2Parameter(p)).append((thisModule.Type2ReturnParameter(s.resultType)))
		)
}

lazy rule Type2ReturnParameter {
	from 
		s: MM!Type
	to 
		t: MM1!Parameter (
			direction <- 'return',
			type <- s
		)
}

lazy rule Type2Parameter {
	from
		s: MM!Type
	to
		t: MM1!Parameter (
			name <- 'param',
			type <- s
		)	
}

rule TypeString2PrimitiveType {
	from
		s: MM!TypeString
	to
		t: MM1!PrimitiveType (
			name <- 'String'
		)
}

rule TypeBoolean2PrimitiveType {
	from
		s: MM!TypeBoolean
	to
		t: MM1!PrimitiveType (
			name <- 'Boolean'
		)
}

rule TypeInteger2PrimitiveType {
	from
		s: MM!TypeInteger
	to
		t: MM1!PrimitiveType (
			name <- 'Integer'
		)
}

rule TypeReal2PrimitiveType {
	from
		s: MM!TypeReal
	to
		t: MM1!PrimitiveType (
			name <- 'Real'
		)
}

rule TypeUnlimitedNatural2PrimitiveType {
	from
		s: MM!TypeUnlimitedNatural
	to
		t: MM1!PrimitiveType (
			name <- 'UnlimitedNatural'
		)
}
